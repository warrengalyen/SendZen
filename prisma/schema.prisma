// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String     @id @default(cuid())
  first_name     String
  last_name      String
  email          String     @unique
  password       String
  send_from_name String
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  lists          List[]
  campaign       Campaign[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model List {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  campaign  Campaign[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts  Contact[]
}

model Contact {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lists     List[]
}

model Campaign {
  id        String   @id @default(cuid())
  name      String
  subject   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  listId    String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  list      List?    @relation(fields: [listId], references: [id], onDelete: Cascade)
}
